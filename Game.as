package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.*;	import flash.events.*;	import flash.geom.Rectangle;	import flash.media.Sound;	import flash.text.*;	import flash.ui.Mouse;	import CustomClick;	import HealthBar;	public class Game extends flash.display.MovieClip	{		public static const STATE_INIT:int = 10;		public static const STATE_MENU:int = 15;		public static const STATE_START_PLAYER:int = 20;		public static const STATE_PLAY_GAME:int = 30;		public static const STATE_REMOVE_PLAYER:int = 40;		public static const STATE_END_GAME:int = 50;		public var gameState:int = 0;		public var score:int = 0;		public var chances:int = 0;		public var bg:MovieClip;		public var enemies:Array;		public var missiles:Array;		public var explosions:Array;		public var player:MovieClip;		public var level:Number = 0;				public var energy:HealthBar;		public var mouseState:Boolean;		//text		public var scoreLabel:TextField = new TextField();		public var levelLabel:TextField = new TextField();		public var scoreText:TextField = new TextField();		public var levelText:TextField = new TextField();				//Menu Screen		public var startGame:CustomClick;		public var logo:MovieClip;		public var sideLogo:MovieClip;		public var replay:CustomClick;		public const SCOREBOARD_Y:Number = 5;		public function Game()		{			addEventListener(Event.ENTER_FRAME, gameLoop);			gameState = STATE_MENU;		}		public function gameLoop(e:Event):void		{			switch (gameState)			{				case STATE_MENU :					mainMenu();					break;				case STATE_INIT :					initGame();					break;				case STATE_START_PLAYER :					startPlayer();					break;				case STATE_PLAY_GAME :					playGame();					break;				case STATE_REMOVE_PLAYER :					removePlayer();					break;				case STATE_END_GAME :					endWindow();					break;			}		}		public function initGame():void		{			scoreLabel.text = "Score:";			levelLabel.text = "Level:";			scoreText.text = "0";			levelText.text = "1";			scoreLabel.y = 4*SCOREBOARD_Y;			levelLabel.y = SCOREBOARD_Y;			scoreText.y = 4*SCOREBOARD_Y;			levelText.y = SCOREBOARD_Y;			scoreLabel.x = 5;			scoreText.x = 50;			levelLabel.x = scoreLabel.x;			levelText.x = scoreText.x;			scoreLabel.textColor = 0xFF0000;			scoreText.textColor = 0xFFFFFF;			levelLabel.textColor = 0xFF0000;			levelText.textColor = 0xFFFFFF;						scoreLabel.selectable = false;			scoreText.selectable = false;			levelLabel.selectable = false;			levelText.selectable = false;						energy = new HealthBar(0x000000, 0xFF0000, 0x00FF00, 100, 10, 100, 10, 40); 						stage.addChild(energy);			stage.addChild(scoreLabel);			stage.addChild(levelLabel);			stage.addChild(scoreText);			stage.addChild(levelText);						Mouse.hide();			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownEvent);			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUpEvent);			score = 0;			chances = 1;			enemies = new Array();			missiles = new Array();			explosions = new Array();			level = 1;			levelText.text = level.toString();			player = new Goalie();			gameState = STATE_START_PLAYER;		}				public function mainMenu():void		{			bg = new BackImage();			stage.addChild(bg);							logo = new Logo();			stage.addChild(logo);			logo.x = stage.stageWidth / 2 - logo.width / 2;			logo.y = SCOREBOARD_Y;						startGame = new CustomClick(50, 25, 0, 1, 0x006633, "START", 10, 0xFFFFFF);			stage.addChild(startGame);			startGame.x = stage.stageWidth / 2 - startGame.width / 2;			startGame.y = logo.y + 250;			startGame.addEventListener(MouseEvent.MOUSE_OVER, startGameRolloverHandler);			startGame.addEventListener(MouseEvent.MOUSE_DOWN, startGameButtonHandler);		}				public function startGameRolloverHandler(m:MouseEvent):void		{			var leftBall = new SoccerBall();			var rightBall = new SoccerBall();						startGame.addChild(leftBall);			startGame.addChild(rightBall);						leftBall.x = -leftBall.width - 2;			leftBall.y = startGame.height / 2 - 13;			rightBall.x = startGame.width - rightBall.width; 			rightBall.y  = leftBall.y;					}				public function startGameButtonHandler(m:MouseEvent):void		{			stage.removeChild(logo);			stage.removeChild(startGame);			startGame.removeEventListener(MouseEvent.MOUSE_DOWN, startGameButtonHandler);			var sound:Sound = new Explode();			sound.play();						gameState = STATE_INIT;		}		public function startPlayer():void		{			stage.addChild(player);			player.stop();			player.startDrag(true,new flash.geom.Rectangle(0,365 ,550,365));			gameState = STATE_PLAY_GAME;		}		public function removePlayer():void		{			for (var i:int = enemies.length-1; i >=0; i--)			{				removeEnemy(i);			}			for (i = missiles.length-1; i >=0; i--)			{				removeMissile(i);			}			for (i = explosions.length-1; i >=0; i--)			{				removeExplosion(i);			}			stage.removeChild(player);			gameState = STATE_START_PLAYER;		}		public function playGame():void		{			makeEnemies();			manageEnergy();			moveEnemies();			testCollisions();			testForEnd();		}				public function manageEnergy():void		{			if (mouseState == true)			{				energy.subtractHealth(0.5);			}			else			{				energy.addHealth(0.25);			}						if (energy.health < 25)			{				energy.changeColor(0xFF0000);			}			else			{				energy.changeColor(0x00FF00);			}					}		public function makeEnemies():void		{			var chance:Number = Math.floor(Math.random() * 100);			var tempEnemy:MovieClip;			if (chance < 2 + level)			{				tempEnemy = new SoccerBall();				tempEnemy.speed = 1 + level;				tempEnemy.y = -25;//changed				tempEnemy.x = Math.floor(Math.random() * 515);				stage.addChild(tempEnemy);				enemies.push(tempEnemy);			}		}		public function moveEnemies()		{			var tempEnemy:MovieClip;			for (var i:int =enemies.length-1; i>=0; i--)			{				tempEnemy = enemies[i];				tempEnemy.y +=  tempEnemy.speed;				if (tempEnemy.y > 435)				{					removeEnemy(i);				}			}			var tempMissile:MovieClip;			for (i=missiles.length-1; i>=0; i--)			{				tempMissile = missiles[i];				tempMissile.y -=  tempMissile.speed;				if (tempMissile.y < -35)				{					removeMissile(i);				}			}			var tempExplosion:MovieClip;			for (i=explosions.length-1; i>=0; i--)			{				tempExplosion = explosions[i];				trace(tempExplosion.totalFrames);				if (tempExplosion.currentFrame >= tempExplosion.totalFrames)				{					removeExplosion(i);				}			}		}		public function testCollisions():void		{			var tempEnemy:MovieClip;			var tempMissile:MovieClip;			var rightGoalPost:uint; 			var leftGoalPost:uint;			enemy:for (var i:int=enemies.length-1; i>=0; i--)			{				tempEnemy = enemies[i];				rightGoalPost = stage.stageWidth - (100 + (tempEnemy.width / 2));				leftGoalPost = 100 - (tempEnemy.width / 2);				for (var j:int=missiles.length-1; j>=0; j--)				{					tempMissile = missiles[j];					if (tempEnemy.hitTestObject(tempMissile))					{						if (tempEnemy.x < rightGoalPost && tempEnemy.x > leftGoalPost)						{							score++;							scoreText.text = score.toString();						}						makeExplosion(tempEnemy.x, tempEnemy.y);						removeEnemy(i);						removeMissile(j);						break enemy;					}				}			}			for (i=enemies.length-1; i>=0; i--)			{				tempEnemy = enemies[i];				rightGoalPost = stage.stageWidth - (100 + (tempEnemy.width / 2));				leftGoalPost = 100 - (tempEnemy.width / 2);								//Test for ball passing player in the goal zone				if (tempEnemy.y >= stage.stageHeight) 				{					if (tempEnemy.x < rightGoalPost && tempEnemy.x > leftGoalPost)					{						chances--;						gameState = STATE_REMOVE_PLAYER;					}				}								//Test for ball being caught by player				if (tempEnemy.hitTestObject(player))				{					if (tempEnemy.x < rightGoalPost && tempEnemy.x > leftGoalPost)						{							score++;							scoreText.text = score.toString();						}					makeExplosion(tempEnemy.x, tempEnemy.y);					removeEnemy(i);				}							}		}		public function makeExplosion(ex:Number, ey:Number):void		{			var tempExplosion:MovieClip;			tempExplosion = new ExplosionImage();			tempExplosion.x = ex;			tempExplosion.y = ey;			stage.addChild(tempExplosion);			explosions.push(tempExplosion);			var sound:Sound = new Explode();			sound.play();		}		public function testForEnd():void		{			if (chances <= 0)			{				removePlayer();				gameState = STATE_END_GAME;			}			else if (score > level*30)			{				level++;				levelText.text = level.toString();			}		}		public function removeEnemy(idx:int)		{			stage.removeChild(enemies[idx]);			enemies.splice(idx,1);		}		public function removeMissile(idx:int)		{			stage.removeChild(missiles[idx]);			missiles.splice(idx,1);		}		public function removeExplosion(idx:int)		{			stage.removeChild(explosions[idx]);			explosions.splice(idx,1);		}		public function onMouseDownEvent(e:MouseEvent)		{			if (gameState == STATE_PLAY_GAME)			{				/*var tempMissile:MovieClip = new Hand();				tempMissile.x = player.x +(player.width/2);				tempMissile.y = player.y;				tempMissile.speed = 5;				missiles.push(tempMissile);				addChild(tempMissile);				var sound:Sound = new Shoot();				sound.play();*/				if (energy.health < 25)				{					player.gotoAndStop(1);				}				else				{					player.gotoAndStop(3);				}								mouseState = true;			}		}				public function onMouseUpEvent(e:MouseEvent)		{			if (gameState == STATE_PLAY_GAME)			{				player.gotoAndStop(1);			}						mouseState = false;		}				public function endWindow():void		{			Mouse.show();						var winnerText:TextField = new TextField();			var winnerTextFormat:TextFormat = new TextFormat(null, 18, 0xFFFFFF, false, false, false);			var font:Font = new Font1();			winnerTextFormat.font = font.fontName;						winnerText.width = 500;			winnerText.selectable = false;			winnerText.defaultTextFormat = winnerTextFormat;						stage.addChild(winnerText);			winnerText.x = stage.stageWidth / 2 - 150;			winnerText.y = stage.stageHeight - 200;						if (level == 1)			{				winnerText.text = "Better luck next time, Sirigu!";			} else if (level == 2)			{				winnerText.text = "Doing better, De Sanctis!";			} else if (level == 3)			{				winnerText.x += 25;				winnerText.text = "Good job, Julio César!";			} else if (level >= 4)			{				winnerText.x = 40;				winnerText.text = "You are Gianluigi Buffon.  Congratulations!";			}						stage.addChild(logo);			logo.x = stage.stageWidth / 2 - logo.width / 2;			logo.y = SCOREBOARD_Y;						replay = new CustomClick(50, 25, 0, 1, 0xCC0000, "REPLAY", 10, 0xFFFFFF);			stage.addChild(replay);			replay.x = stage.stageWidth / 2 - replay.width / 2;			replay.y = logo.y + 350;			replay.addEventListener(MouseEvent.ROLL_OVER, replayRolloverHandler);			replay.addEventListener(MouseEvent.MOUSE_DOWN, replayButtonHandler);		}				public function replayRolloverHandler(m:MouseEvent):void		{			var leftBall = new SoccerBall();			var rightBall = new SoccerBall();						replay.addChild(leftBall);			replay.addChild(rightBall);						leftBall.x = -leftBall.width - 2;			leftBall.y = replay.height / 2 - 13;			rightBall.x = replay.width - rightBall.width; 			rightBall.y  = leftBall.y;		}				public function replayButtonHandler(m:MouseEvent):void		{			stage.removeChild(logo);			stage.removeChild(replay);			replay.removeEventListener(MouseEvent.MOUSE_OVER, replayRolloverHandler);			replay.removeEventListener(MouseEvent.MOUSE_DOWN, replayButtonHandler);						gameState = STATE_MENU;		}			}}